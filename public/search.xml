<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/08/27/JAVA%E4%B9%8B%E9%A2%84%E7%BC%96SQL/"/>
      <url>/2023/08/27/JAVA%E4%B9%8B%E9%A2%84%E7%BC%96SQL/</url>
      
        <content type="html"><![CDATA[<p>JAVA之预编SQL</p><p>预编译SQL能有效的防止sql注入问题。那么首先我们会想到，什么是sql注入。</p><p>sql注入就是利用sql语法上的漏洞，进行注入攻击，能够到达获取数据库信息，或者是在不知道密码的情况下，直接登入网站后台的效果。其攻击方式可以分为：联合查询注入，时间盲注，布尔盲注，堆叠注入，分块注入，DNSlog回显注入，报错注入。下面，我们列举一个最简单的sql注入的例子。</p><p>比如：系统中存在一个最简单的sql注入的漏洞，我们可以利用语法上的错误，将密码那一栏写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or 1=&#x27;1</span><br></pre></td></tr></table></figure><p>那么实际上这条命令传递到后端之后再经过后端发送到服务器上面，这段语句就变成了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> password <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这段话的意思就是password恒等于1，恒为true，所以不管怎么样，都能从数据库中查到东西。</p><p>这样，一个简单的sql注入就完成了。</p><p>那么，怎么解决此类问题呢？</p><p>这个时候我们就要用到预编译sql了。</p><p>在预编译sql里，我们会用？来代替#{}里面的内容，比如，我不把他写死，而是在接口里面将要传递的参数写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where password = #&#123;password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">select</span><span class="params">(String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在此时，java代码会有一个预编译的过程，将#{}用？代替，而实际上传递到数据库的参数就会变成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> password <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure><p>这样的话，即使你想输入上面的sql注入，其内容也会被替换成问号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;or 1=&#x27;</span><span class="number">1</span> 替换成 ？</span><br></pre></td></tr></table></figure><p>这样的话，传递到数据库的查询语句就会是password &#x3D; ？ ，这样显然是不符合语法的，所以并不能查出想要的结果。</p><p>自此，就可以很好的防止sql注入。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
